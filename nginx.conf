worker_processes  10;
error_log /var/log/nginx/error.log info;

events {
  worker_connections 2048;
  multi_accept on;
}

http {
  access_log /var/log/nginx/access.log;

  sendfile on;
  tcp_nopush on;
  tcp_nodelay on;
  keepalive_timeout 65;
  types_hash_max_size 2048;

  include /usr/local/openresty/nginx/conf/mime.types;
  default_type application/octet-stream;

  gzip on;
  gzip_disable "msie6";

  gzip_vary on;
  gzip_proxied any;
  gzip_comp_level 6;
  gzip_buffers 16 8k;
  gzip_http_version 1.1;
  gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

  # Reuse redis connection
  init_worker_by_lua_block {
    redis        = require("resty.redis");
    idle_timeout = 10000;
    pool_size    = 100; -- Expected concurrency requests / workers (1000 / 10 = 100)
  }

  # wispro web
  upstream wispro {
    server unix:///app/sockets/server.sock fail_timeout=0 max_fails=0;
  }

  # WisproBmu Web
  server {
    client_max_body_size 128M;

    listen 80 default_server;
    server_name _;
    root /app/public;
    try_files $uri @app;

    location ~ \.php$ {
      return 403;
    }

    location /ping {
      return 200 'PONG';
    }

    location /assets/ {
      expires max;
      add_header Cache-Control public;
    }

    location @app {
      proxy_set_header Host               $http_host;
      proxy_set_header X-Forwarded-By     $server_addr:$server_port;
      proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Host   $http_host;
      proxy_set_header X-Forwarded-Proto  $scheme;
      proxy_set_header X-Forwarded-Server $http_host;
      proxy_set_header X-Real-IP          $remote_addr;

      proxy_buffering            on;
      proxy_pass                 http://wispro;
      proxy_pass_request_headers on;
      proxy_redirect             off;
    }
  }

  # WisproBmu Web SSL
  server {
    ssl on;
    ssl_certificate /data/cert.pem;
    ssl_certificate_key /data/cert.key;
    client_max_body_size 128M;

    listen       443 ssl http2 deferred default_server;
    server_name  _;
    root /app/public;
    try_files $uri @app;

    location ~ \.php$ {
      return 403;
    }

    location /assets/ {
      expires max;
      add_header Cache-Control public;
    }

    location @app {
      proxy_set_header Host               $http_host;
      proxy_set_header X-Forwarded-By     $server_addr:$server_port;
      proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Host   $http_host;
      proxy_set_header X-Forwarded-Proto  $scheme;
      proxy_set_header X-Forwarded-Server $http_host;
      proxy_set_header X-Real-IP          $remote_addr;

      proxy_buffering            on;
      proxy_pass                 http://wispro;
      proxy_pass_request_headers on;
      proxy_redirect             off;
    }
  }

  # Redirections
  server {
    listen 85;
    keepalive_timeout 10;
    lua_code_cache on;

    location / {
      add_header Cache-Control "no-store, no-cache, must-revalidate";
      expires -1;

      access_by_lua_block {
        local woothee = require "resty.woothee"
        local user_agent = ngx.var.http_user_agent or ""
        local browser = woothee.parse(user_agent)

        local its_a_browser = (
          (
            browser and (
              browser.category == "pc" or
              browser.category == "smartphone" or
              browser.category == "mobilephone"
            )
          ) or
          string.find(user_agent:lower(), ".*captive.*")
        )

        if not its_a_browser then
          return ngx.exit(404)
        end

        local red = redis:new()
        red:set_timeout(5000)

        local file, err = io.open('/app/public/assets/first_lan_ip', 'r')
        local mark_as_seen_url = 'http://google.com'

        if file then
          local ip = file:read()
          mark_as_seen_url = "http://" .. ip .. "/contract_notifications/blank/mark_as_seen"
        end

        local ok, err = red:connect("127.0.0.1", 6379)
        if not ok or err then
          ngx.log(ngx.ERR, "failed connect to redis", err)

          return ngx.redirect(mark_as_seen_url, 307)
        end

        local ok, err = red:auth("6ce55d63c1008b02c0079cccd9c3e42720e756b521e5ddb0405b9caf0b373b2d")
        if not ok or err then
          red:set_keepalive(idle_timeout, pool_size)

          ngx.log(ngx.ERR, "failed auth on redis", err)

          return ngx.redirect(mark_as_seen_url, 307)
        end

        local url_list, err = red:lrange(ngx.var.remote_addr, 0, 0)

        if not url_list or url_list == ngx.null or not url_list[1] or url_list[1] == ngx.null then
          red:set_keepalive(idle_timeout, pool_size)

          ngx.log(ngx.ERR, "failed to get key " .. ngx.var.remote_addr .. " in redis: ", err)
          return ngx.redirect(mark_as_seen_url, 307)
        end

        local back_url, err = ngx.var.scheme .. "://" .. ngx.var.host .. ngx.var.request_uri

        if error or string.find(back_url:lower(), ".*generate_204.*") then
          back_url = "https://www.google.com"
        end

        red:set_keepalive(idle_timeout, pool_size)

        return ngx.redirect(url_list[1] .. "&back_url=" .. back_url, 307)
      }
    }
  }
}
