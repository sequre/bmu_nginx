worker_processes  10;
error_log /var/log/nginx/error.log info;

events {
  worker_connections 2048;
  multi_accept on;
}

http {
  access_log /var/log/nginx/access.log;

  sendfile on;
  tcp_nopush on;
  tcp_nodelay on;
  keepalive_timeout 65;
  types_hash_max_size 2048;

  default_type application/octet-stream;

  gzip on;
  gzip_disable "msie6";

  gzip_vary on;
  gzip_proxied any;
  gzip_comp_level 6;
  gzip_buffers 16 8k;
  gzip_http_version 1.1;
  gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

  # wispro web
  upstream wispro {
    server localhost:3000 fail_timeout=0;
  }

  # WisproBmu Web
  server {
    listen 80 default_server;
    server_name _;
    root /app/public;
    client_max_body_size 128M;

    try_files $uri @app;

    location @app {
      proxy_set_header Host               $http_host;
      proxy_set_header X-Forwarded-By     $server_addr:$server_port;
      proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Host   $http_host;
      proxy_set_header X-Forwarded-Proto  $scheme;
      proxy_set_header X-Forwarded-Server $http_host;
      proxy_set_header X-Real-IP          $remote_addr;

      proxy_pass     http://wispro;
      proxy_redirect off;
    }

    location /assets/ {
      expires max;
      add_header Cache-Control public;
    }
  }

  # WisproBmu Web SSL
  server {
    ssl on;
    ssl_certificate /data/cert.pem;
    ssl_certificate_key /data/cert.key;
    client_max_body_size 128M;

    listen       443 ssl http2 deferred default_server;
    server_name  _;
    root /app/public;
    try_files $uri/index.html $uri @app;

    location ~ \.php$ {
      return 403;
    }

    location /assets/ {
      expires max;
      add_header Cache-Control public;
    }

    location @app {
      proxy_set_header Host               $http_host;
      proxy_set_header X-Forwarded-By     $server_addr:$server_port;
      proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Host   $http_host;
      proxy_set_header X-Forwarded-Proto  $scheme;
      proxy_set_header X-Forwarded-Server $http_host;
      proxy_set_header X-Real-IP          $remote_addr;

      proxy_buffering            on;
      proxy_pass                 http://wispro;
      proxy_pass_request_headers on;
      proxy_redirect             off;
    }
  }

  # Redirections
  server {
    listen 85;

    location / {
      access_by_lua '
        local woothee = require "resty.woothee"
        local browser = woothee.parse(ngx.var.http_user_agent)

        if not browser or browser.category == "UNKNOWN" then
          ngx.log(ngx.ERR, "Not human")
          return ngx.exit(404)
        end

        local redis = require "resty.redis"
        local red = redis:new()

        red:set_timeout(5000)

        local ok, err = red:connect("127.0.0.1", 6379)
        if not ok then
          ngx.log(ngx.ERR, "failed to connect to redis: ", err)
          return ngx.exit(404)
        end

        local url, err = red:get(ngx.var.remote_addr)

        if not url or url == ngx.null then
          ngx.log(ngx.ERR, "redis not found", err)
          return ngx.exit(404)
        end

        local back_url, err = ngx.var.http_host .. ngx.var.request_uri

        return ngx.redirect(url .. "&back_url=" .. back_url, 301)
      ';
    }
  }
}
